//jS
console.log('New number, who dis?')

// Given the following objects:
// const mom = {
//     firstName: 'Alice',
//     lastName: 'Wong',
//     eyeColor: 'brown',
//     hairColor: 'black',
// };

// const daughter = {
//     firstName: 'Ilene',
//     hairColor: 'brown',
// };

// One 
// Write code to make daughter inerit properties from mom. What are the daughter's properties and their values? Print them out

// Two
// Add a method called showInfo to mom by attaching a function to it as a property. Calling this method will print out all four porperties. Call this method on both mom and daughter.

const Mom = function() {
    this.firstName = 'Alice';
    this.lastName = 'Wong';
    this.eyeColor = 'brown';
    this.hairColor = 'black';
    this.showInfo = () => {console.log(this.firstName, this.lastName, this.eyeColor, this.hairColor);};
};
function Daughter(){
    Mom.call(this);
}
const mom = new Mom();
const daughter = new Daughter();
daughter.firstName = 'Ilene';
daughter.hairColor = 'brown';

mom.showInfo();
daughter.showInfo();

// Given this Person type: 

// function Person(name) {
//     this.name = name;
//     this.friends = [];
// }

// Person.prototype.addFriend = function(friend) {
//     this.friends.push(friend);
// };

// Person.prototype.createGreeting = function(other) {
//     return 'Yo ' + other.name + '! from ' + this.name + '.';
// };

// Person.prototype.greet = function(other) {
//     console.log(this.createGreeting(other));
// };

// Rewrite the above as a class

class Person{
    constructor(name){
        this.name = name;
        this.friends = [];
    }
    addFriend(friend){
        this.friends.push(friend);
    }
    createGreeting(other){
        return 'Yo ' + other.name + '! from ' + this.name + '.';
    }
    greet(other){
        console.log(this.createGreeting(other));
    }
}

const danny = new Person('Danny');
const mary = new Person('Mary');

danny.addFriend(mary);
danny.greet(mary);

// These thises
// Given the Person type given in the last problem, add to it a lazyGreet
// Methods which will print out the same greeting message but only after 
// 2 seconds

Person.prototype.lazyGreet = function(other) {
    setTimeout(() => {this.greet(other)}, 2000);
    // setTimeout(() => {console.log('Yo ' + other.name + '! from ' + this.name + '.')}, 2000);
}
danny.lazyGreet(mary);

// These thises 2
// Add to Person a crateGreetingsForFriends method which will return an array of strings - each string in the array is a greeting generated by the createGreeting

// const alfie = new Person('Alfie');
// const anushka = new Person('Anushka');
// const henrique = new Person('Henrique');
// alfie.addFriend(anushka);
// alfie.addFriend(henrique);
// alfie.createGreetingForFriends();
// ["Yo Anushka! from Alfie.", "Yo Henrique! from Alfie"];
// Do this without using a loop but by using a map instead

const alfie = new Person('Alfie');
const anushka = new Person('Anushka');
const henrique = new Person('Henrique');

Person.prototype.createGreetingsForFriends = function() {
    return this.friends.map((friend) => {
        return this.createGreeting(friend);
    });
    // // return this.friends.map(function(friend){
    //     return this.createGreeting(friend);
    // });
}

alfie.addFriend(anushka);
alfie.addFriend(henrique);
console.log(alfie.createGreetingsForFriends());